[
    //migrate [dbo].[address_labels] to [dbo].[utl_Address_Label]
    {
        "Id": 1000,
        "Source": {
            "Tables": "[dbo].[address_labels] al",
            "OrderBy": "order by Address_ID"
        },
        "Destination": {
            "Tables": "utl_Address_Label"
        },
        "Map": {
            "(case when Attached_To = 'A' then 1 when Attached_To = 'C' then 6 else 0 end) ModuleID": "ModuleID",
            "1 LabelFormatType": "LabelFormatType",
            "convert(bigint,Attached_Record_ID) AttachedRecordNumber": "AttachedRecordNumber",
            "convert(bigint,Address_ID) AddressID": "AddressID",
            "Label_Line_1": "LabelLine1",
            "Label_Line_2": "LabelLine2",
            "Label_Line_3": "LabelLine3",
            "Label_Line_4": "LabelLine4",
            "Label_Line_5": "LabelLine5",
            "Label_Line_6": "LabelLine6",
            "Label_Line_7": "LabelLine7",
            "Label_Line_8": "LabelLine8"
        }
    },
    //migrate [dbo].[address] to [dbo].[utl_Address]
    {
        "Id": 1001,
        "Source": {
            "Tables": "[dbo].[address] ad",
            "OrderBy": "order by ad.Account_Number",
            "Join": "left join [dbo].[account] acc on acc.Account_Number = ad.Account_Number and ad.Attached_To = 'A'"
        },
        "Destination": {
            "Tables": "utl_Address"
        },
        "Map": {
            "(case when Attached_To = 'A' then 1 when Attached_To = 'C' then 6 else 0 end) ModuleID": "ModuleID",
            "convert(bigint,ad.Account_Number) AccountNumber": "AccountNumber",
            "convert(bigint,Attached_Record_Number) AttachedRecordNumber": "AttachedRecordNumber",
            "Location_Name": "LocationName",
            "Attention_Name": "AttentionName",
            "convert(bigint,Attention_Contact_Number) AttentionContactNumber": "AttentionContactNumber",
            "Street_Line_1": "StreetLine1",
            "Street_Line_2": "StreetLine2",
            "Street_Line_3": "StreetLine3",
            "City": "City",
            "County": "County",
            "State": "State",
            "Postal_Code": "PostalCode",
            "Country": "Country",
            "Address_Type": "AddressType",
            "Accounting_Interface": "AccountingInterface",
            "Ship_To_ID": "ShipToID",
            "Address_Label_Format": "AddressLabelFormat",
            "(case when ad.Address_Record_Number = acc.Primary_Address_Record then 1 else 0 end) IsPrimaryAddress": "IsPrimaryAddress",
            "(case when ad.Address_Record_Number = acc.Primary_Bill_To_Address_ID then 1 else 0 end) IsPrimaryBillToAddress": "IsPrimaryBillToAddress",
            "(case when ad.Address_Record_Number = acc.Primary_Ship_To_Address_ID then 1 else 0 end) IsPrimaryShipToAddress": "IsPrimaryShipToAddress",
            "Address_Notes": "AddressNotes"
        }
    },
    //migrate [dbo].[phone] to [dbo].[fld_Multi_FieldValue]
    {
        "Id": 1002,
        "Source": {
            "Tables": "[dbo].[phone] p",
            "OrderBy": "order by p.Account_Number",
            "Join": "left join [dbo].[account] acc on acc.Account_Number = p.Account_Number and p.Attached_To = 'A'"
        },
        "Destination": {
            "Tables": "fld_Multi_FieldValue"
        },
        "NeedTruncate": false,
        "Map": {
            "(case when Phone_Medium = 'V' then 5 when Phone_Medium = 'F' then 6 else 0 end) FieldID": "FieldID",
            "convert(bigint,p.Account_Number) RecID": "RecID",
            "[tempdb].[dbo].[ConvertPhoneFax](Phone_Number,'') FieldVal": "FieldVal",
            "Extension": "Ext",
            "(case when ((p.Phone_Record_Number = acc.Primary_Phone_Record and p.Phone_Medium = 'V') or (p.Phone_Record_Number = acc.Primary_Fax_Record and p.Phone_Medium = 'F')) then 1 else 0 end) IsPrimary": "IsPrimary",
            "p.Notes": "Notes"
        }
    },
    //migrate [dbo].[net] to [dbo].[fld_Multi_FieldValue]
    {
        "Id": 1003,
        "Source": {
            "Tables": "[dbo].[net] n",
            "OrderBy": "order by n.Account_Number",
            "Join": "left join [dbo].[account] acc on acc.Account_Number = n.Account_Number and n.Attached_To = 'A'"
        },
        "Destination": {
            "Tables": "fld_Multi_FieldValue"
        },
        "NeedTruncate": false,
        "Map": {
            "(case when Address_Type = 'E' then 7 when Address_Type = 'W' then 8 else 0 end) FieldID": "FieldID",
            "convert(bigint,n.Account_Number) RecID": "RecID",
            "Net_Address": "FieldVal",
            "(case when ((n.Net_Record_Number = acc.Primary_Email_Record and n.Address_Type = 'E') or (n.Net_Record_Number = acc.Primary_Web_Record and n.Address_Type = 'W')) then 1 else 0 end) IsPrimary": "IsPrimary",
            "n.Notes": "Notes"
        }
    },
    //migrate [dbo].[account] to acc_Account
    {
        "Id": 1004,
        "Source": {
            "Tables": "[dbo].[account] acc",
            "OrderBy": "order by acc.Account_Number",
            "Join": "left join [dbo].[address] ad on ad.Account_Number = acc.Account_Number and ad.Address_Record_Number = acc.Primary_Address_Record and ad.Attached_To = 'A'",
            "Join1": "left join [dbo].[phone] phone on phone.Attached_Record_Number = acc.Account_Number and phone.Phone_Record_Number = acc.Primary_Phone_Record and phone.Phone_Medium = 'V' and phone.Attached_To = 'A'",
            "Join2": "left join [dbo].[phone] fax on fax.Attached_Record_Number = acc.Account_Number and fax.Phone_Record_Number = acc.Primary_Fax_Record and fax.Phone_Medium = 'F' and fax.Attached_To = 'A'",
            "Join3": "left join [dbo].[net] email on email.Attached_Record_Number = acc.Account_Number and email.Net_Record_Number = acc.Primary_Email_Record and email.Address_Type = 'E' and email.Attached_To = 'A'",
            "Join4": "left join [dbo].[net] web on web.Attached_Record_Number = acc.Account_Number and web.Net_Record_Number = acc.Primary_Web_Record and web.Address_Type = 'W' and web.Attached_To = 'A'",
            "Join5": "left join (select *,ROW_NUMBER() over(order by [Currency_Code]) CurrencyID from [adaptv3system].[dbo].[currency_codes]) curc on curc.Currency_Code = acc.Currency_Code",
            "JoinUser": "Account_Manager,Service_Manager,Create_User,Modified_User"
        },
        "Destination": {
            "Tables": "acc_Account"
        },
        "Map": {
            "convert(bigint,acc.Account_Number) AccountNumber": "AccountNumber",
            "acc.Account_Name": "AccountName",
            "Account_Full_Name": "AccountFullName",
            "Company_ID": "CompanyID",
            "Customer_Number": "CustomerNumber",
            "Vendor_Number": "VendorNumber",
            "convert(varchar(255),acc.Account_Type) AccountTypeID": "AccountTypeID",
            "convert(varchar(255),acc.Last_Primary_Source) LastPrimarySourceID": "LastPrimarySourceID",
            "convert(varchar(255),acc.Last_Secondary_Source) LastSecondarySourceID": "LastSecondarySourceID",
            "convert(bigint,acc.Last_Marketing_Campaign) LastMarketingCampaignID": "LastMarketingCampaignID",
            "convert(varchar(255),acc.Last_Marketing_Event) LastMarketingEventID": "LastMarketingEventID",
            "acc.Original_Primary_Source": "OriginalPrimarySourceID",
            "acc.Original_Secondary_Source": "OriginalSecondarySourceID",
            "convert(int, acc.Original_Marketing_Campaign) OriginalMarketingCampaignID": "OriginalMarketingCampaignID",
            "convert(int, acc.Original_Marketing_Event) OriginalMarketingEventID": "OriginalMarketingEventID",
            "convert(varchar(255),acc.Territory_ID) TerritoryID": "TerritoryID",
            "Business_Type": "BusinessTypeID",
            "ms_accountmanager.NewValTable AccountManager": "AccountManager",
            "ms_servicemanager.NewValTable ServiceManagerID": "ServiceManagerID",
            //"Service_Contract_Number":  "",
            //"Last_Technician": "",
            //"Last_Service_Date": "",
            "convert(varchar(255),Support_Basis) SupportStatusID": "SupportStatusID",
            "Free_Support_Expires_Syspro_TF": "ReceivesFreeSupport",
            "[tempdb].[dbo].[GetDate](Free_Support_Expires_Date) ReceivesFreeSupportUntil": "ReceivesFreeSupportUntil",
            "convert(varchar(255),Service_Location) ServiceLocationID": "ServiceLocationID",
            "convert(varchar(255),acc.Service_Portal_Access_Level) ServicePortalAccessLevel": "ServicePortalAccessLevel",
            "convert(bigint,Primary_Sales_Contact) PrimaryContactID": "PrimaryContactID",
            //"Primary_Service_Contact":  "",
            //"Primary_Collections_Contact": "",
            //"Secondary_Customer_Contact": "",
            //"Primary_Vendor_Contact": "",
            //"Secondary_Vendor_Contact": "",
            //"Last_Phone_Record": "",
            "([tempdb].[dbo].[ConvertPhoneFax](phone.Phone_Number,phone.Extension)) TelephoneNumber": "TelephoneNumber",
            //"Phone_Count": "",
            "([tempdb].[dbo].[ConvertPhoneFax](fax.Phone_Number,fax.Extension)) FaxNumber": "FaxNumber",
            //"Fax_Count": "",
            //"Last_Address_Record": "",
            "ad.Location_Name": "AddressLocationName",
            "ad.Street_Line_1": "AddressLine1",
            "ad.Street_Line_2": "AddressLine2",
            "ad.Street_Line_3": "AddressLine3",
            "ad.City": "City",
            "ad.County": "County",
            "ad.State": "State",
            "ad.Postal_Code": "PostalCode",
            "ad.Country": "Country",
            "ad.Address_Type": "AddressTypeID",
            "ad.Address_Notes": "AddressNotes",
            //"Primary_Address_Record": "",
            //"Primary_Bill_To_Address_ID": "",
            //"Primary_Ship_To_Address_ID": "",
            //"Address_Count": "",
            //"Last_Net_Record": "",
            "email.Net_Address EmailAddress": "EmailAddress",
            //"Email_Count": "",
            "web.Net_Address WebAddress": "WebAddress",
            //"Web_Count": "",
            //"Alert_Flag": "",
            "acc.Active_Flag_Syspro_TF": "IsActiveAccount",
            "convert(varchar(255),acc.Language) LanguageID": "LanguageID",
            "convert(bigint,Total_Activities) TotalActivities": "TotalActivities",
            "convert(decimal(15,4),Total_Sales) TotalSales": "TotalSales",
            //"Total_Open_Sales": "",
            "convert(decimal(15,4),Total_Lost_Sales) TotalLostSales": "TotalLostSales",
            "Open_Service_Tickets": "TotalOpenServiceTicket",
            "Closed_Service_Tickets": "TotalClosedServiceTicket",
            //"Last_Service_Contact": "",
            "convert(varchar(255),acc.Last_Milestone) LastMilestoneID": "LastMilestoneID",
            "[tempdb].[dbo].[GetDate](acc.Last_Milestone_Date) LastMilestoneDate": "LastMilestoneDate",
            "convert(varchar(255),acc.Next_Milestone) NextMilestoneID": "NextMilestoneID",
            "convert(varchar(255),Tax_Schedule) TaxScheduleID": "TaxScheduleID",
            "convert(varchar(255),Payment_Terms) PaymentTermID": "PaymentTermID",
            "Credit_Hold_Syspro_TF": "IsCreditHold",
            //"Credit_Hold_Date": "",
            "convert(varchar(255),Shipping_Method) ShippingMethodID": "ShippingMethodID",
            "convert(varchar(255),FOB) FOBID": "FOBID",
            "convert(varchar(255),curc.CurrencyID) CurrencyCodeID": "CurrencyCodeID",
            "convert(varchar(255),Customer_Class) CustomerClassID": "CustomerClassID",
            "acc.Do_Not_Call_Syspro_TF": "IsDoNotCall",
            "acc.Do_Not_Fax_Syspro_TF": "IsDoNotFax",
            "acc.Do_Not_Email_Syspro_TF": "IsDoNotEmail",
            "acc.Do_Not_Mail_Syspro_TF": "IsDoNotMail",
            "Accounting_Branch": "Branch",
            //"(select count(Contact_Number) from [dbo].[contact] where Account_Number = acc.Account_Number) TotalContact": "TotalContact",
            //"(select count(Item_Owned_Record_ID) from [dbo].[acctitem] where Account_Number = acc.Account_Number) TotalItemOwned": "TotalItemOwned",
            //"convert(decimal(15,4),(select count(Opportunity_Number) from [dbo].[oppty] where Account_Number = acc.Account_Number and Status = 1)) TotalOpenOpportunities": "TotalOpenOpportunities",
            //"convert(decimal(15,4),(select count(Opportunity_Number) from [dbo].[oppty] where Account_Number = acc.Account_Number and Status = 4)) TotalPostedOpportunities": "TotalPostedOpportunities",
            //"convert(decimal(15,4),(select count(Opportunity_Number) from [dbo].[oppty] where Account_Number = acc.Account_Number and Status = 5)) TotalCanceledOpportunities": "TotalCanceledOpportunities",
            //"(select count(Contract_Number) from [dbo].[service_contracts] where Account_Number = acc.Account_Number and Contract_Status = 2) TotalActiveServiceContracts": "TotalActiveServiceContracts",
            //"(select count(Contract_Number) from [dbo].[service_contracts] where Account_Number = acc.Account_Number and Contract_Status = 4) TotalExpiredServiceContracts": "TotalExpiredServiceContracts",
            //"(select count(Goal_Record_ID) from [dbo].[sales_goals] where Account_Number = acc.Account_Number) TotalGoals": "TotalGoals",
            //"(select top 1 ([tempdb].[dbo].[GetDateTime](Activity_Date,Activity_Time)) from [dbo].[act] where Account_Number = acc.Account_Number order by Activity_Date desc,Activity_Time desc) LastActivityDate": "LastActivityDate",
            //"(select top 1 ([tempdb].[dbo].[GetDateTime](Start_Date,Start_Time)) from [dbo].[appt] where Account_Number = acc.Account_Number and Completed = 'F' ORDER BY Account_Number ASC ,Completed ASC ,Start_Date ASC ,Start_Time ASC ,Appointment_ID ASC) NextActivityDate": "NextActivityDate",
            "acc.Notes": "Notes",
            "[tempdb].[dbo].[GetDateTime](acc.Create_Date,acc.Created_Time) Created_Date": "CreatedDate",
            "ms_createuser.NewValTable CreatedBy": "CreatedBy",
            "[tempdb].[dbo].[GetDateTime](acc.Modified_Date,acc.Modified_Time) ModifiedDate": "ModifiedDate",
            "ms_modifieduser.NewValTable ModifiedBy": "ModifiedBy"
        }
    },
    //migrate [dbo].[phone] to [dbo].[fld_Multi_FieldValue]
    {
        "Id": 1005,
        "Source": {
            "Tables": "[dbo].[phone] p",
            "OrderBy": "order by p.Account_Number",
            "Join": "left join [dbo].[contact] ct on ct.Contact_Number = p.Attached_Record_Number and p.Attached_To = 'C'"
        },
        "Destination": {
            "Tables": "fld_Multi_FieldValue"
        },
        "NeedTruncate": false,
        "Map": {
            "(case when Phone_Medium = 'V' then 63 when Phone_Medium = 'F' then 111 when Phone_Medium = 'M' then 62 else 0 end) FieldID": "FieldID",
            "convert(bigint,p.Attached_Record_Number) RecID": "RecID",
            "[tempdb].[dbo].[ConvertPhoneFax](Phone_Number,'') FieldVal": "FieldVal",
            "Extension": "Ext",
            "(case when ((p.Phone_Record_Number = ct.Default_Phone_Record and p.Phone_Medium = 'V') or (p.Phone_Record_Number = ct.Default_Fax_Record and p.Phone_Medium = 'F') or (p.Phone_Record_Number = ct.Default_Mobile_Record and p.Phone_Medium = 'M')) then 1 else 0 end) IsPrimary": "IsPrimary",
            "p.Notes": "Notes"
        }
    },
    //migrate [dbo].[net] to [dbo].[fld_Multi_FieldValue]
    {
        "Id": 1006,
        "Source": {
            "Tables": "[dbo].[net] n",
            "OrderBy": "order by n.Account_Number",
            "Join": "left join [dbo].[contact] ct on ct.Contact_Number = n.Attached_Record_Number and n.Attached_To = 'C'"
        },
        "Destination": {
            "Tables": "fld_Multi_FieldValue"
        },
        "NeedTruncate": false,
        "Map": {
            "(case when Address_Type = 'E' then 67 else 0 end) FieldID": "FieldID",
            "convert(bigint,n.Attached_Record_Number) RecID": "RecID",
            "Net_Address": "FieldVal",
            "(case when ((n.Net_Record_Number = ct.Default_Email_Record and n.Address_Type = 'E')) then 1 else 0 end) IsPrimary": "IsPrimary",
            "n.Notes": "Notes"
        }
    },
    //migrate [dbo].[contact] to [dbo].[con_Contact]
    {
        "Id": 1007,
        "Source": {
            "Tables": "[dbo].[contact] ct",
            "OrderBy": "order by ct.Contact_Number",
            "Join": "left join [adaptv3system].[dbo].[name_prefixes] np on np.Name_Prefix = ct.Name_Prefix",
            "Join1": "left join [adaptv3system].[dbo].[name_suffixes] ns on ns.Name_Suffix = ct.Name_Suffix",
            "Join2": "left join (select ROW_NUMBER() over (order by Job_Title) JobTitleID ,*  from [adaptv3system].[dbo].jobtitle) as jt on jt.Job_Title = ct.Job_Title",
            "Join3": "left join (select ROW_NUMBER() over (order by Department_Name) DepartmentID,*  from [adaptv3system].[dbo].dept) as dept on dept.Department_Name = ct.Department",
            "Join4": "left join [dbo].[phone] phone on phone.Attached_Record_Number = ct.Contact_Number and phone.Phone_Record_Number = ct.Default_Phone_Record and phone.Phone_Medium = 'V' and phone.Attached_To = 'C'",
            "Join5": "left join [dbo].[phone] fax on fax.Attached_Record_Number = ct.Contact_Number and fax.Phone_Record_Number = ct.Default_Fax_Record and fax.Phone_Medium = 'F' and fax.Attached_To = 'C'",
            "Join6": "left join [dbo].[phone] mobile on mobile.Attached_Record_Number = ct.Contact_Number and mobile.Phone_Record_Number = ct.Default_Mobile_Record and mobile.Phone_Medium = 'M' and mobile.Attached_To = 'C'",
            "Join7": "left join [dbo].[net] email on email.Attached_Record_Number = ct.Contact_Number and email.Net_Record_Number = ct.Default_Email_Record and email.Address_Type = 'E' and email.Attached_To = 'C'",
            "Join8": "left join [dbo].[account] acc on acc.Account_Number = ct.Account_Number",
            "Join9": "left join [dbo].[address] ad on ad.Account_Number = ct.Account_Number and ad.Address_Record_Number = acc.Primary_Address_Record and ad.Attached_To = 'A'",
            "JoinUser": "Contact_Manager,Created_By,Modified_By"
        },
        "Destination": {
            "Tables": "con_Contact"
        },
        "Map": {
            "convert(bigint, Contact_Number) ContactNumber": "ContactNumber",
            "convert(bigint, ct.Account_Number) AccountNumber": "AccountNumber",
            "ct.First_Name": "FirstName",
            "ct.Last_Name": "LastName",
            "ct.Middle_Name": "MiddleName",
            //"[Last_Name_Soundex]"
            "np.Record_ID ContactNamePrefixID": "ContactNamePrefixID",
            "ns.Record_ID ContactNameSuffixID": "ContactNameSuffixID",
            "Contact_Name": "ContactName",
            "Contact_Type": "ContactTypeID",
            //Account_Type
            //Contact_Territory
            "ms_contactmanager.NewValTable ContactManagerID": "ContactManagerID",
            "ct.Original_Primary_Source": "OriginalPrimarySourceID",
            "ct.Original_Secondary_Source": "OriginalSecondarySourceID",
            "ct.Original_Marketing_Campaign": "OriginalMarketingCampaignID",
            "ct.Original_Marketing_Event": "OriginalMarketingEventID",
            "ct.Last_Primary_Source": "LastPrimarySourceID",
            "ct.Last_Secondary_Source": "LastSecondarySourceID",
            "ct.Last_Marketing_Campaign": "LastMarketingCampaignID",
            "ct.Last_Marketing_Event": "LastMarketingEventID",
            "Active_Contact_Syspro_TF": "IsActiveContact",
            "ct.Do_Not_Call_Syspro_TF": "IsDoNotCall",
            "ct.Do_Not_Fax_Syspro_TF": "IsDoNotFax",
            "ct.Do_Not_Email_Syspro_TF": "IsDoNotEmail",
            "ct.Do_Not_Mail_Syspro_TF": "IsDoNotMail",
            "jt.JobTitleID": "JobTitle",
            "dept.DepartmentID": "Department",
            "Salutation": "Salutation",
            "([tempdb].[dbo].[ConvertPhoneFax](phone.Phone_Number,phone.Extension)) ContactPhoneNumber": "ContactPhoneNumber",
            "([tempdb].[dbo].[ConvertPhoneFax](fax.Phone_Number,fax.Extension)) ContactFaxNumber": "ContactFaxNumber",
            "([tempdb].[dbo].[ConvertPhoneFax](mobile.Phone_Number,mobile.Extension)) MobileNumber": "MobileNumber",
            "email.Net_Address ContactEmailAddress": "ContactEmailAddress",
            "ad.Location_Name": "AddressLocationName",
            "ad.Street_Line_1": "AddressLine1",
            "ad.Street_Line_2": "AddressLine2",
            "ad.Street_Line_3": "AddressLine3",
            "ad.City": "City",
            "ad.County": "County",
            "ad.State": "State",
            "ad.Postal_Code": "PostalCode",
            "ad.Country": "Country",
            "ad.Address_Type": "AddressTypeID",
            "ad.Address_Notes": "AddressNotes",
            "case when acc.Primary_Sales_Contact = ct.Contact_Number then 1 else 0 end IsPrimarySalesContact": "IsPrimarySalesContact",
            "case when acc.Primary_Service_Contact = ct.Contact_Number then 1 else 0 end IsPrimaryServiceContact": "IsPrimaryServiceContact",
            "case when acc.Primary_Collections_Contact = ct.Contact_Number then 1 else 0 end IsPrimaryCollectionsContact": "IsPrimaryCollectionsContact",
            "case when acc.Primary_Customer_Contact = ct.Contact_Number then 1 else 0 end IsPrimaryCustomerContact": "IsPrimaryCustomerContact",
            "case when acc.Secondary_Customer_Contact = ct.Contact_Number then 1 else 0 end IsSecondaryCustomerContact": "IsSecondaryCustomerContact",
            "case when acc.Primary_Vendor_Contact = ct.Contact_Number then 1 else 0 end IsPrimaryVendorContact": "IsPrimaryVendorContact",
            "case when acc.Secondary_Vendor_Contact = ct.Contact_Number then 1 else 0 end IsSecondaryVendorContact": "IsSecondaryVendorContact",
            "Contact_Address_ID": "PrimaryAddressID",
            "ct.Language": "LanguageID",
            //Parent_Contact
            "Decision_Making_Authority": "DecisionAuthorityID",
            //TotalActivities
            //TotalOpenOpportunities
            //TotalWonOpportunities
            //TotalLostOpportunities
            //TotalPostedOpportunities
            //TotalCanceledOpportunities
            //TotalOpenServiceTicket
            //TotalClosedServiceTicket
            //IsWriteToOutLook
            //ContactedByMarketingCampaignID
            //ContactedByMarketingEventID
            //AccountingContactNumber
            "ct.Notes": "Notes",
            "ct.Last_Milestone": "LastMilestoneID",
            "[tempdb].[dbo].[GetDate](ct.Last_Milestone_Date) LastMilestoneDate": "LastMilestoneDate",
            "ct.Next_Milestone": "NextMilestoneID",
            //Service_Portal_Access_Level
            //LastActivityDate
            //NextActivityDate
            "[tempdb].[dbo].[GetDateTime](ct.Created_Date,ct.Created_Time) Created_Date": "CreatedDate",
            "ms_createdby.NewValTable CreatedBy": "CreatedBy",
            "[tempdb].[dbo].[GetDateTime](ct.Modified_Date,ct.Modified_Time) ModifiedDate": "ModifiedDate",
            "ms_modifiedby.NewValTable ModifiedBy": "ModifiedBy"
        }
    },
    //migrate [dbo].[acctitem] to [dbo].[acc_Account_Item_Owned]
    {
        "Id": 1008,
        "Source": {
            "Tables": "[dbo].[acctitem] accit",
            "OrderBy": "order by accit.Item_Owned_Record_ID",
            "JoinUser": "Created_By,Modified_By"
        },
        "Destination": {
            "Tables": "acc_Account_Item_Owned"
        },
        "Map": {
            "convert(bigint,Item_Owned_Record_ID) AccountItemOwnID": "AccountItemOwnID",
            "convert(bigint,Parent_Record_ID) ParentID": "ParentID",
            "BOM_Level": "BOMLevel",
            "convert(bigint,accit.Account_Number) AccountNumber": "AccountNumber",
            "Item_Number": "ItemNumber",
            "Serial_Number": "SerialLotNumber",
            "Item_Class": "ItemClassID",
            "convert(decimal(15,4), Unit_Price_Paid) UnitPricePaid": "UnitPricePaid",
            "convert(decimal(15,4), Total_Quantity) TotalQuantity": "TotalQuantity",
            "Covered_By_Warranty_Syspro_TF": "IsCoveredByWarranty",
            "Warranty_Type": "WarrantyTypeID",
            "Warranty_Number": "WarrantyNumber",
            //"Warranty_Starts": ""
            "[tempdb].[dbo].[GetDateTime](Warranty_Starts,Warranty_Ends) WarrantyEnd": "WarrantyEnd",
            "[tempdb].[dbo].[GetDateTime](Free_Support_Ends,'000000') FreeSupportEnd": "FreeSupportEnd",
            "[tempdb].[dbo].[GetDateTime](Last_Service_Date,'000000') LastServiceDate": "LastServiceDate",
            "convert(bigint,Last_Ticket_Number) LastTicketNumber": "LastTicketNumber",
            "[tempdb].[dbo].[GetDateTime](Next_Scheduled_Service,'000000') NextScheduledService": "NextScheduledService",
            "convert(bigint,Contact_Number) ContactNumber": "ContactNumber",
            "Invoice_Number": "InvoiceNumber",
            "Order_Number": "OrderNumber",
            "Contains_Components_Syspro_TF": "IsContainComp",
            "accit.Notes": "Notes",
            "accit.Created_Date": "CreatedDate",
            "ms_createdby.NewValTable CreatedUserID": "CreatedUserID",
            "accit.Modified_Date": "UpdatedDate",
            "ms_modifiedby.NewValTable UpdatedUserID ": "UpdatedUserID"
        }
    },
    //migrate [dbo].[item_history] to [dbo].[acc_Account_Item_Owned_History]
    {
        "Id": 1009,
        "Source": {
            "Tables": "[dbo].[item_history] ith",
            "OrderBy": "order by ith.Transaction_Number",
            "Join": "left join [dbo].[acctitem] accit on accit.Item_Owned_Record_ID = ith.Item_Record_ID",
            "JoinUser": "Transferred_By"
        },
        "Destination": {
            "Tables": "acc_Account_Item_Owned_History"
        },
        "Map": {
            "convert(bigint,Transaction_Number) HistID": "HistID",
            "convert(bigint,Item_Record_ID) AccountItemOwnID": "AccountItemOwnID",
            "ms_transferredby.NewValTable TranUserID": "TranUserID",
            "[tempdb].[dbo].[GetDateTime](ith.Transfer_Date,ith.Transfer_Time) TranDate": "TranDate",
            "convert(bigint,ith.Account_Number) AccountNumber": "AccountNumber",
            "accit.Item_Number": "ItemNumber",
            "accit.Contact_Number": "ContactNumber",
            "accit.Serial_Number": "SerialLotNumber",
            "accit.Item_Class": "ItemClassID",
            "convert(decimal(15,4),accit.Unit_Price_Paid) UnitPricePaid": "UnitPricePaid",
            "convert(decimal(15,4),accit.Total_Quantity) TotalQuantity": "TotalQuantity",
            "accit.Covered_By_Warranty_Syspro_TF": "IsCoveredByWarranty",
            "accit.Warranty_Type": "WarrantyTypeID",
            "accit.Warranty_Number": "WarrantyNumber",
            "[tempdb].[dbo].[GetDateTime](accit.Warranty_Starts,accit.Warranty_Ends) WarrantyEnd": "WarrantyEnd",
            "[tempdb].[dbo].[GetDateTime](accit.Free_Support_Ends,'000000') FreeSupportEnd": "FreeSupportEnd",
            "[tempdb].[dbo].[GetDateTime](accit.Last_Service_Date,'000000') LastServiceDate": "LastServiceDate",
            "convert(bigint,accit.Last_Ticket_Number) LastTicketNumber": "LastTicketNumber",
            "[tempdb].[dbo].[GetDateTime](accit.Next_Scheduled_Service,'000000') NextScheduledService": "NextScheduledService",
            "accit.Invoice_Number": "InvoiceNumber",
            "accit.Order_Number": "OrderNumber",
            "accit.Contains_Components_Syspro_TF": "IsContainComp",
            "'Insert' TranType": "TranType",
            "accit.Notes": "Notes",
            "convert(decimal(15,4),0) CurrentUnitPrice": "CurrentUnitPrice"
        }
    },
    //migrate ticket to set_Service_Ticket
    {
        "Id": 1010,
        "Source": {
            "Tables": "[dbo].[ticket] st",
            "OrderBy": "order by st.Ticket_Number",
            "Join": "left join (select *,ROW_NUMBER() over(order by [Currency_Code]) CurrencyID from [adaptv3system].[dbo].[currency_codes]) curc on curc.Currency_Code = st.Currency_Code",
            "JoinUser": "Last_Escalation_User,Posted_By,Closed_By_User,Approved_Declined_By,Submitted_for_Approval_By,Acceptance_Entered_By,Submitted_to_Client_By,Hold_Waiting_for_User,Hold_Placed_By_User,Started_By,Reported_By,Created_By,Modified_By"
        },
        "Destination": {
            "Tables": "set_Service_Ticket"
        },
        "Map": {
            "convert(bigint, st.Ticket_Number) ServiceTicketNumber": "ServiceTicketNumber",
            "convert(bigint, st.Account_Number) AccountNumber": "AccountNumber",
            "convert(bigint, st.Contact_Number) ContactNumber": "ContactNumber",
            "convert(bigint, st.Related_Account_Number) RelatedAccountNumber": "RelatedAccountNumber",
            "convert(varchar, st.Related_Contact_Number) RelatedContactNumber": "RelatedContactNumber",
            "Reference_Number": "ReferenceNumber",
            "convert(varchar,Service_Ticket_Type) ServiceTicketTypeID": "ServiceTicketTypeID",
            "Subject": "Subject",
            "convert(varchar, Ticket_Status) TicketStatusTypeID": "TicketStatusTypeID",
            //"Open_Flag"
            //Skip_Client_Approval_Job
            "[tempdb].[dbo].[GetDateTime](st.Reported_Date,'000000') ReportedDate": "ReportedDate",
            "[tempdb].[dbo].[GetTime](st.Reported_Time) ReportedTime": "ReportedTime",
            "ms_reportedby.NewValTable ReportedBy": "ReportedBy",
            "convert(varchar,Ticket_Source) SourceID": "SourceID",
            "[tempdb].[dbo].[GetDateTime](st.Started_Date,'000000') StartedDate": "StartedDate",
            "[tempdb].[dbo].[GetTime](st.Started_Time) StartedTime": "StartedTime",
            "ms_startedby.NewValTable StartedBy": "StartedBy",
            "[tempdb].[dbo].[GetDateTime](st.Must_Respond_By_Date,'000000') RespondedDate": "RespondedDate",
            "[tempdb].[dbo].[GetTime](st.Must_Respond_By_Time) RespondedTime": "RespondedTime",
            "[tempdb].[dbo].[GetDateTime](st.On_Hold_Date,'000000') OnHoldDate": "OnHoldDate",
            "[tempdb].[dbo].[GetTime](st.On_Hold_Time) OnHoldTime": "OnHoldTime",
            "ms_holdplacedbyuser.NewValTable HoldPlacedByUserID": "HoldPlacedByUserID",
            "convert(varchar, On_Hold_Reason_ID) HoldReasonID": "HoldReasonID",
            "Hold_Waiting_For": "HoldWaitingForTypeID",
            "ms_holdwaitingforuser.NewValTable HoldWaitingForUserID": "HoldWaitingForUserID",
            "convert(bigint, st.Hold_Waiting_for_Account) HoldWaitingForAccountNumber": "HoldWaitingForAccountNumber",
            "[tempdb].[dbo].[GetDateTime](st.Submitted_to_Client_Date,'000000') SubmittedToClientDate": "SubmittedToClientDate",
            "[tempdb].[dbo].[GetTime](st.Submitted_to_Client_Time) SubmittedToClientTime": "SubmittedToClientTime",
            "ms_submittedtoclientby.NewValTable SubmittedToClientBy": "SubmittedToClientBy",
            //"Accepted_By_Client"
            "[tempdb].[dbo].[GetDateTime](st.Accepted_Date,'000000') AcceptedDate": "AcceptedDate",
            "[tempdb].[dbo].[GetTime](st.Accepted_Time) AcceptedTime": "AcceptedTime",
            "ms_acceptanceenteredby.NewValTable AcceptedBy": "AcceptedBy",
            //"Accepted_By_Contact_Number"
            "[tempdb].[dbo].[GetDateTime](st.Submitted_for_Approval_Date,'000000') SubmittedForApprovalDate": "SubmittedForApprovalDate",
            "[tempdb].[dbo].[GetTime](st.Submitted_for_Approval_Time) SubmittedForApprovalTime": "SubmittedForApprovalTime",
            "ms_submittedforapprovalby.NewValTable SubmittedForApprovalBy": "SubmittedForApprovalBy",
            "Approval_Status": "ApprovalStatusID",
            "[tempdb].[dbo].[GetDateTime](st.Approved_Declined_Date,'000000') ApprovedDeclinedDate": "ApprovedDeclinedDate",
            "[tempdb].[dbo].[GetTime](st.Approved_Declined_Time) ApprovedDeclinedTime": "ApprovedDeclinedTime",
            "ms_approveddeclinedby.NewValTable ApprovedDeclinedBy": "ApprovedDeclinedBy",
            "[tempdb].[dbo].[GetDateTime](st.Closed_Date,'000000') ClosedDate": "ClosedDate",
            "[tempdb].[dbo].[GetTime](st.Closed_Time) ClosedTime": "ClosedTime",
            "ms_closedbyuser.NewValTable ClosedBy": "ClosedBy",
            "[tempdb].[dbo].[GetDateTime](st.Posted_Date,'000000') PostedDate": "PostedDate",
            "[tempdb].[dbo].[GetTime](st.Posted_Time) PostedTime": "PostedTime",
            "ms_postedby.NewValTable PostedBy": "PostedBy",
            //Printed
            //Printed_Date
            //Printed_Time
            //Printed_By
            //Printed_Version_Number
            "Item_Number": "ItemNumber",
            "Serial_Number": "SerialNumber",
            "convert(bigint,Item_Owned_Record_ID) AccountItemOwnedID": "AccountItemOwnedID",
            //[Item_Check_Overridden]
            //"[Contract_Check_Overridden]"
            "convert(varchar,Problem_Class) ProblemClassID": "ProblemClassID",
            "convert(varchar,Problem_Type) ProblemTypeID": "ProblemTypeID",
            "convert(varchar,Problem_Subtype) ProblemSubTypeID": "ProblemSubTypeID",
            "convert(varchar,Resolution_Type) ResolutionTypeID": "ResolutionTypeID",
            //[Customer_Rating]
            "convert(varchar,Priority) PriorityTypeID": "PriorityTypeID",
            "convert(varchar,Severity) SeverityTypeID": "SeverityTypeID",
            "Assigned_To": "AssignedTo",
            "(case when Assigned_To = 2 then [tempdb].[dbo].GetUserIDNewCRM(Assigned_To_ID) else 0 end) AssignedToUser": "AssignedToUser",
            "convert(int,case when Assigned_To = 3 then Assigned_To_ID else NULL end) AssignedToQueue": "AssignedToQueue",
            "[tempdb].[dbo].[GetDateTime](st.Assigned_Date,'000000') AssignedDate": "AssignedDate",
            "[tempdb].[dbo].[GetTime](st.Assigned_Time) AssignedTime": "AssignedTime",
            //"[Original_Assigned_To]"
            //"[Original_Assigned_To_ID]"
            //"[Original_Assigned_Date]"
            //"[Original_Assigned_Time]"
            "convert(varchar,Escalation_Level) EscalationLevelID": "EscalationLevelID",
            "[tempdb].[dbo].[GetDateTime](st.Last_Escalation_Date,'000000') LastEscalationDate": "LastEscalationDate",
            "[tempdb].[dbo].[GetTime](st.Last_Escalation_Time) LastEscalationTime": "LastEscalationTime",
            "ms_lastescalationuser.NewValTable LastEscalationBy": "LastEscalationBy",
            "Escalation_Pattern_ID": "EscalationPatternID",
            "Routing_ID": "RoutingID",
            "[tempdb].[dbo].[GetDateTime](st.Next_Escalation_Date,'000000') NextEscalationDate": "NextEscalationDate",
            "[tempdb].[dbo].[GetTime](st.Next_Escalation_Time) NextEscalationTime": "NextEscalationTime",
            "Next_Escalation_Trigger": "NextEscalationTrigger",
            //Last_Activity_Date
            //Last_Activity_ID
            //Next_Activity_Date
            //Next_Activity_ID
            "Response_Given_Syspro_TF": "IsResponseGiven",
            "[tempdb].[dbo].[GetDateTime](st.Response_Date,'000000') ResponseRequiredByDate": "ResponseRequiredByDate",
            "[tempdb].[dbo].[GetTime](st.Response_Time) ResponseRequiredByTime": "ResponseRequiredByTime",
            //Response_User
            "Total_Activity_Duration": "TotalActivityDurationMinutes",
            //"Override_Duration"
            //Manual_Duration
            "convert(bigint,Service_Ticket_Contract_Number) ContractNumber": "ContractNumber",
            "Labor_Fee_Basis": "LaborFeeBasisTypeID",
            "convert(decimal(15,4),Fixed_Labor_Fee_Amount) FixedLaborFeeAmount": "FixedLaborFeeAmount",
            "Fixed_Labor_Fee_Time_Increment": "FixedLaborFeeTimeIncrement",
            "Fixed_Labor_Fee_Time_Units": "FixedLaborFeeTimeUnit",
            //Override_Fee
            //Manual_Fee
            //Number_of_Web_Messages
            //Number_of_Read_Web_Messages
            "convert(varchar,Last_Milestone) LastMilestone": "LastMilestone",
            "[tempdb].[dbo].[GetDateTime](st.Last_Milestone_Date,'000000') LastMilestoneDate": "LastMilestoneDate",
            "convert(varchar,Next_Milestone) NextMilestone": "NextMilestone",
            "RMA_Number": "RMANumber",
            //"Bill_To_Attention": "BillToAttention"
            "0 BillToAttention": "BillToAttention",
            "Bill_To_Street_Line_1": "BillToAddressLine1",
            "Bill_To_Street_Line_2": "BillToAddressLine2",
            "Bill_To_Street_Line_3": "BillToAddressLine3",
            "Bill_To_City": "BillToCity",
            "Bill_To_County": "BillToCounty",
            "Bill_To_State": "BillToState",
            "Bill_To_Postal_Code": "BillToPostalCode",
            "Bill_To_Country": "BillToCountry",
            //"Ship_To_Attention": "ShipToAttention"
            "0 ShipToAttention": "ShipToAttention",
            "Ship_To_Street_Line_1": "ShipToAddressLine1",
            "Ship_To_Street_Line_2": "ShipToAddressLine2",
            "Ship_To_Street_Line_3": "ShipToAddressLine3",
            "Ship_To_City": "ShipToCity",
            "Ship_To_County": "ShipToCounty",
            "Ship_To_State": "ShipToState",
            "Ship_To_Postal_Code": "ShipToPostalCode",
            "Ship_To_Country": "ShipToCountry",
            //Printed_Comments_ID
            "curc.CurrencyID": "Currency",
            //Printed_Format_ID
            "Tax_Schedule_ID": "TaxScheduleID",
            "Tax_Rate": "TaxRate",
            "convert(decimal(15,4),Total_Standard_Fee) TotalFee": "TotalFee",
            //"Total_Overtime_Labor_Fee"
            //Total_Other_Time_Labor_Fee
            "convert(decimal(15,4),Total_Parts_Fee) TotalPartsFee": "TotalPartsFee",
            "convert(decimal(15,4),Total_Expenses_Cost) TotalExpensesCost": "TotalExpensesCost",
            "convert(decimal(15,4),Total_Billed_Expenses_Fee) TotalBilledExpensesFee": "TotalBilledExpensesFee",
            "convert(decimal(15,4),Total_Tax) TotalTax": "TotalTax",
            "convert(decimal(15,4),Total_Expenses_Cost) TotalExpensesCost": "TotalExpensesCost",
            //Total_Parts_Cost
            //Total_Standard_Labor_Cost
            //Total_Overtime_Labor_Cost
            //Total_Other_Time_Labor_Cost
            //Total_Non_Billed_Labor_Cost
            //Total_Standard_Time_Minutes
            //Total_Over_Time_Minutes
            //Total_Other_Time_Minutes
            //Total_Non_Billed_Time_Minutes
            //Last_Labor_Record_ID
            //Last_Parts_Record_ID
            //Last_Expense_Record_ID
            //Last_Job_Type_ID
            "st.Reason_for_Hold_Notes ReasonForHoldNotes": "ReasonForHoldNotes",
            "[tempdb].[dbo].[GetDateTime](st.Created_Date,st.Created_Time) Created_Date": "CreatedDate",
            "ms_createdby.NewValTable CreatedBy": "CreatedBy",
            "[tempdb].[dbo].[GetDateTime](st.Modified_Date,st.Modified_Time) ModifiedDate": "ModifiedDate",
            "ms_modifiedby.NewValTable ModifiedBy": "ModifiedBy"
        }
    },
    //migrate [dbo].[service_contracts] to [dbo].[set_Service_Contract]
    {
        "Id": 1011,
        "Source": {
            "Tables": "[dbo].[service_contracts] svc",
            "OrderBy": "order by svc.Contract_Number",
            "Join": "left join [dbo].[contract_hold_notes] chn on chn.Contract_Number = svc.Contract_Number",
            "Join1": "left join [dbo].[contract_renew] cr on cr.Old_Contract = svc.Contract_Number",
            "Join2": "left join [adaptv3system].[dbo].[users] statusby on statusby.User_ID = chn.Status_By",
            "Join3": "left join  [tempdb].[dbo].[MigrateSupport] ms_statusby on ms_statusby.TargetServer='.' and ms_statusby.OldValTable = statusby.Email_Address",
            "JoinUser": "Created_By,Modified_By"
        },
        "Destination": {
            "Tables": "set_Service_Contract"
        },
        "Map": {
            "svc.Contract_Number_Syspro_FBI": "ContractNumber",
            "svc.Contract_Type": "ContractTypeID",
            "svc.Account_Number_Syspro_FBI": "AccountNumber",
            //Account_Name
            "svc.Contract_Status": "ContractStatusTypeID",
            "svc.Active_Flag_Syspro_TF": "IsActive",
            "Opportunity_Number_Syspro_FBI": "OpportunityNumber",
            "Warranty_Flag_Syspro_TF": "IsWarranty",
            "Warranty_Item_Number": "WarrantyItemNumber",
            "Warranty_Serial_Number": "WarrantySerialNumber",
            "Warranty_Lot_Number": "WarrantyLotNumber",
            "Fee_Basis": "ContractFeeBasisTypeID",
            "Fee_Basis_Amount_Syspro_FD": "FeeBasisAmount",
            "Contract_Actual_Fee_Syspro_FD": "ContractActualFee",
            "Covered_Items": "CoveredItemTypeID",
            "Covered_Parts": "CoveredPartTypeID",
            "Covered_Labor": "CoveredLaborTypeID",
            "Covered_Expenses": "CoveredExpense",
            "Limit_to_Authorized_Contacts_Syspro_TF": "IsLimitToAuthorizedContact",
            "Maximum_Authorized_Contacts": "MaximumAuthorizedContact",
            "Authorized_Contact_Count": "AuthorizedContactCount",
            "Usage_Fee_Basis": "UsageFeeBasisTypeID",
            "Usage_Limit_Flag_Syspro_TF": "IsUsageLimit",
            "Usage_Limit_Amount": "UsageLimitAmount",
            "Usage_Limit_Units": "UsageLimitUnitTypeID",
            "Fixed_Labor_Rate_Amount_Syspro_FD": "FixedLaborRateAmount",
            "Fixed_Labor_Rate_Units": "FixedLaborRateUnitTypeID",
            "Other_Billing_Increment_Syspro_FD": "OtherBillingIncrement",
            "Other_Billing_Increment_Units": "OtherBillingIncrementUnit",
            "Follows_Calendar_ID": "FollowCalendarID",
            "Promised_Response_Time_Amount": "PromisedResponseTimeAmount",
            "Promised_Response_Time_Units": "PromisedResponseTimeUnitTypeID",
            "Triggered_Process_ID": "TriggeredProcessID",
            "[tempdb].[dbo].[GetDateTime](svc.Sold_Date,'000000') SoldDate": "SoldDate",
            "[tempdb].[dbo].[GetDateTime](svc.Start_Date,'000000') StartDate": "StartDate",
            "[tempdb].[dbo].[GetDateTime](svc.Effective_Start_Date,'000000') EffectiveStartDate": "EffectiveStartDate",
            "[tempdb].[dbo].[GetDateTime](svc.Expiration_Date,'000000') ExpirationDate": "ExpirationDate",
            "[tempdb].[dbo].[GetDateTime](svc.Renewal_Deadline,'000000') RenewalDeadline": "RenewalDeadline",
            "Contract_Starts_Basis": "ContractStartTypeID",
            "Contract_Ends_Basis": "ContractEndTypeID",
            "Contract_Ends_Fixed_Month": "ContractEndFixedMonth",
            "Contract_Ends_Fixed_Day": "ContractEndFixedDay",
            "Minimum_Duration_Amount": "MinimumDurationAmount",
            "Minimum_Duration_Units": "MinimumDurationUnit",
            "Other_Duration_Amount": "OtherDurationAmount",
            "Other_Duration_Units": "OtherDurationUnitTypeID",
            "Renewal_Limit_Days": "RenewalLimitDay",
            "Total_Minutes_Used": "TotalMinutesUsed",
            "Total_Tickets_Used": "TotalTicketsUsed",
            "Expiration_Job_ID": "ExpirationJobID",
            "case when chn.Contract_Number >0 then 1 else 0 end IsContractOnHold": "IsContractOnHold",
            "RTRIM(LTRIM(convert(varchar(max),isnull(chn.Status_Notes,'')))) HoldReasonNotes": "HoldReasonNotes",
            "[tempdb].[dbo].[GetDateTime](chn.Status_Date,chn.Status_Time) HoldDate": "HoldDate",
            "ms_statusby.NewValTable HoldUserID": "HoldUserID",
            "case when cr.Old_Contract > 0 then convert(decimal(15,4),Contract_Actual_Fee) else NULL end ContractRenewalFee": "ContractRenewalFee",
            "case when cr.Old_Contract > 0 then 1 else 0 end ContractRenewed": "ContractRenewed",
            "DATEDIFF(day,[tempdb].[dbo].[GetDateTime](svc.Sold_Date,'000000'),[tempdb].[dbo].[GetDateTime](svc.Expiration_Date,'000000')) DaysUntilExpiration": "DaysUntilExpiration",
            "svc.Notes": "Notes",
            "[tempdb].[dbo].[GetDateTime](svc.Created_Date,svc.Created_Time) CreatedDate": "CreatedDate",
            "ms_createdby.NewValTable CreatedUserID": "CreatedUserID",
            "[tempdb].[dbo].[GetDateTime](svc.Modified_Date,svc.Modified_Time) UpdatedDate": "UpdatedDate",
            "ms_modifiedby.NewValTable UpdatedUserID": "UpdatedUserID"
        }
    },
    //migrate [dbo].[contract_renew] to [dbo].[set_Contract_Renew]
    {
        "Id": 1012,
        "Source": {
            "Tables": "[dbo].[contract_renew] cr",
            "OrderBy": "order by cr.Old_Contract"
        },
        "Destination": {
            "Tables": "set_Contract_Renew"
        },
        "Map": {
            "Old_Contract_Syspro_FBI": "OldContractNumber",
            "New_Contract_Syspro_FBI": "NewContractNumber"
        }
    },
    //migrate [dbo].[contract_warranty_items] to [dbo].[set_Contract_Item_Owned_Xref]
    {
        "Id": 1013,
        "Source": {
            "Tables": "[dbo].[contract_warranty_items] cwi",
            "OrderBy": "order by cwi.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Item_Owned_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Line_Number": "LineNumber",
            "Item_Number": "ItemNumber",
            "Warrant_Serial": "WarrantSerial",
            "Item_Owned_ID_Syspro_FBI": "AccountItemOwnID"
        }
    },
    //migrate [dbo].[svc_contract_items] to [dbo].[set_Contract_Item_Xref]
    {
        "Id": 1014,
        "Source": {
            "Tables": "[dbo].[svc_contract_items] sci",
            "OrderBy": "order by sci.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Item_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Account_Number_Syspro_FBI": "AccountNumber",
            "Contract_Active_Syspro_TF": "IsContractActive",
            "Item_Coverage_Scope": "CoverageScopeTypeID",
            "Item_Class_ID": "ItemClassID",
            "Item_Number": "ItemNumber"
        }
    },
    //migrate [dbo].[svc_contract_parts] to [dbo].[set_Contract_Part_Xref]
    {
        "Id": 1015,
        "Source": {
            "Tables": "[dbo].[svc_contract_parts] scp",
            "OrderBy": "order by scp.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Part_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Account_Number_Syspro_FBI": "AccountNumber",
            "Contract_Active_Syspro_TF": "IsContractActive",
            "Item_Coverage_Scope": "CoverageScopeTypeID",
            "Item_Class_ID": "ItemClassID",
            "Item_Number": "ItemNumber",
            "Item_Coverage_Scope": "CoverageScopeTypeID",
            "Coverage_Level": "CoverageScopeLevelTypeID",
            "Discount_Amount_Syspro_FD": "DiscountAmount",
            "Fixed_Price_Syspro_FD": "FixedPrice"
        }
    },
    //migrate [dbo].[svc_contract_jobs] to [dbo].[set_Contract_Job_Xref]
    {
        "Id": 1016,
        "Source": {
            "Tables": "[dbo].[svc_contract_jobs] scj",
            "OrderBy": "order by scj.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Job_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Account_Number_Syspro_FBI": "AccountNumber",
            "Active_Contract_Syspro_TF": "IsActiveContract",
            "Coverage_Scope": "CoverageScopeTypeID",
            "Job_Class": "JobClassID",
            "Job_Type": "JobTypeID",
            "Coverage_Level": "CoverageLevelID",
            "Coverage_Level": "CoverageScopeLevelTypeID",
            "Discount_Amount_Syspro_FD": "DiscountAmount",
            "Fixed_Price_Syspro_FD": "FixedPrice",
            "Fixed_Price_Time_Units": "FixedPriceTimeUnit"
        }
    },
    //migrate [dbo].[svc_contract_expenses] to [dbo].[set_Contract_Expense_Xref]
    {
        "Id": 1017,
        "Source": {
            "Tables": "[dbo].[svc_contract_expenses] sce",
            "OrderBy": "order by sce.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Expense_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Account_Number_Syspro_FBI": "AccountNumber",
            "Active_Contract_Syspro_TF": "IsContractActive",
            "Expense_Category": "ExpenseCategoryID"
        }
    },
    //migrate [dbo].[service_contract_contact] to [dbo].[set_Contract_Contact_Xref]
    {
        "Id": 1018,
        "Source": {
            "Tables": "[dbo].[service_contract_contact] scc",
            "OrderBy": "order by scc.Contract_Number"
        },
        "Destination": {
            "Tables": "set_Contract_Contact_Xref"
        },
        "Map": {
            "Contract_Number_Syspro_FBI": "ContractNumber",
            "Authorized_Contact_Number_Syspro_FBI": "ContactNumber"
        }
    }
]
